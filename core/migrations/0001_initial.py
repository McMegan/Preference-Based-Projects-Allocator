# Generated by Django 4.2.4 on 2023-08-28 10:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_manager', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True, null=True)),
                ('min_students', models.IntegerField()),
                ('max_students', models.IntegerField()),
                ('area', models.ManyToManyField(related_name='projects', to='core.area')),
            ],
            options={
                'ordering': ['number', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=15)),
                ('name', models.CharField(max_length=255)),
                ('year', models.CharField(max_length=4)),
                ('semester', models.CharField(max_length=50)),
                ('preference_submission_start', models.DateTimeField(blank=True, null=True)),
                ('preference_submission_end', models.DateTimeField(blank=True, null=True)),
                ('minimum_preference_limit', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('limit_by_major', models.BooleanField(default=False)),
                ('is_allocating', models.BooleanField(default=False)),
                ('allocation_status', models.CharField(choices=[('OP', 'Successful (Optimal)'), ('FS', 'Successful (Feasible)'), ('IF', 'Failed (Proven Infeasible)'), ('UN', 'Failed (Proven Unbounded)'), ('AB', 'Failed (Abnormal)'), ('MI', 'Failed (Model Invalid)'), ('NO', 'Failed (Not Solved)')], max_length=2, null=True)),
                ('manager', models.ForeignKey(limit_choices_to={'is_manager': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_units', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=15)),
                ('allocated_preference_rank', models.PositiveIntegerField(null=True)),
                ('allocated_project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocated_students', to='core.project')),
                ('area', models.ManyToManyField(related_name='students', to='core.area')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.unit')),
                ('user', models.ForeignKey(blank=True, limit_choices_to={'is_student': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='ProjectPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_preferences', to='core.project')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_preferences', to='core.student')),
            ],
            options={
                'ordering': ['student__student_id', 'rank', 'project_id'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='core.unit'),
        ),
        migrations.AddConstraint(
            model_name='unit',
            constraint=models.UniqueConstraint(fields=('code', 'year', 'semester'), name='core_unit_unique'),
        ),
        migrations.AddConstraint(
            model_name='unit',
            constraint=models.CheckConstraint(check=models.Q(('preference_submission_start__isnull', True), ('preference_submission_end__isnull', True), ('preference_submission_start__lt', models.F('preference_submission_end')), _connector='OR'), name='preference_submission_start_lt_end', violation_error_message='The preference submission end must be after the preference submission start.'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(fields=('student_id', 'unit'), name='core_student_unique'),
        ),
        migrations.AddConstraint(
            model_name='projectpreference',
            constraint=models.UniqueConstraint(fields=('student', 'rank'), name='core_projectpreference_rank_unique'),
        ),
        migrations.AddConstraint(
            model_name='projectpreference',
            constraint=models.UniqueConstraint(fields=('student', 'project'), name='core_projectpreference_project_unique'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.UniqueConstraint(fields=('unit', 'number'), name='core_project_rank_unique', violation_error_message='Each project in a unit must have a unique number. A project with that number is already included in this unit.'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.CheckConstraint(check=models.Q(('min_students__isnull', True), ('max_students__isnull', True), ('min_students__lte', models.F('max_students')), _connector='OR'), name='min_lte_max', violation_error_message='The minimum number of students for a project must not be less than the maximum number of students.'),
        ),
    ]
